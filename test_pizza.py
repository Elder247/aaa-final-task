import pytest
from pizza import Margherita, Pepperoni, Hawaiian
from utils import log, delivery, pickup


def test_dict_pizzas():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ dict() –¥–ª—è –ø–∏—Ü—Ü"""
    expected_margherita = {'tomato sauce': '1 cup',
                           'mozzarella': '7 ounces',
                           'tomatoes': '3'}

    expected_pepperoni = {'tomato sauce': '1 cup',
                          'mozzarella': '7 ounces',
                          'pepperoni': '5'}

    expected_hawaiian = {'tomato sauce': '1 cup',
                         'mozzarella': '7 ounces',
                         'chicken': '10 ounces',
                         'pineapples': '5 ounces'}

    assert Margherita().dict() == expected_margherita
    assert Pepperoni().dict() == expected_pepperoni
    assert Hawaiian().dict() == expected_hawaiian


def test_set_size_pizzas():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞ –ø–∏—Ü—Ü—ã"""
    assert Margherita('L').size == 'L'
    assert Margherita('XL').size == 'XL'
    with pytest.raises(TypeError):
        Margherita(10)
    with pytest.raises(ValueError):
        Margherita('S')


def test_eq_pizzas():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ __eq__() –¥–ª—è –ø–∏—Ü—Ü —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏ —Ä–∞–∑–Ω—ã–º–∏
    —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏
    """
    pizza1 = Margherita()
    pizza2 = Margherita('L')
    pizza3 = Margherita('XL')
    pizza4 = Pepperoni()

    assert pizza1 == pizza2
    assert pizza1 != pizza3  # –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ø–æ —Ä–∞–∑–º–µ—Ä—É
    assert pizza1 != pizza4  # –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º


def test_str_pizzas():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ __str__() –¥–ª—è –ø–∏—Ü—Ü"""
    assert str(Margherita()) == 'Margherita üçÖ'
    assert str(Pepperoni()) == 'Pepperoni üçï'
    assert str(Hawaiian()) == 'Hawaiian üçç'


def test_delivery_pickup_before_decoration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π delivery() –∏ pickup() –¥–æ –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
    pizza = Margherita()
    assert delivery.__wrapped__(pizza) == pizza
    assert pickup.__wrapped__(pizza) == pizza
    with pytest.raises(TypeError):
        delivery('Margherita')
        pickup('Margherita')


def test_delivery_pickup_after_decoration(capsys: pytest.CaptureFixture):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π delivery() –∏ pickup() –ø–æ—Å–ª–µ –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
    pizza = Margherita()
    assert delivery.__name__ == 'delivery'
    assert pickup.__name__ == 'pickup'

    delivery(pizza)
    captured = capsys.readouterr()
    assert captured.out.startswith('–î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ ')
    assert captured.out.endswith('—Å!\n')
    assert '{}' not in captured.out


def test_log_decorator(capsys: pytest.CaptureFixture):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ log()"""

    @log('–ü—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {}!')
    def wrapped_func() -> None:
        pass

    wrapped_func()
    captured = capsys.readouterr()
    assert captured.out.startswith('–ü—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ')
    assert captured.out.endswith('!\n')
    assert '{}' not in captured.out
